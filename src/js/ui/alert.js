/**
 * --------------------------------------------------------------------------
 * Licensed under MIT (https://github.com/quark-dev/Phonon-Framework/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */

const Alert = (() => {
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  const NAME = 'alert'
  const VERSION = '2.0.0'

  const BACKDROP_SELECTOR = 'alert-backdrop'
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  class Alert {
    constructor(alert) {
      this.alert = alert
    }

    // getters

    static get version() {
      return `${NAME}.${VERSION}`
    }

    // private
    createBackdrop() {
      const backdrop = document.createElement('div')
      backdrop.setAttribute('data-id', this.alert.id)
      backdrop.classList.add(BACKDROP_SELECTOR)
      return backdrop
    }

    center() {
      const computedStyle = window.getComputedStyle(this.alert)
      // const width = computedStyle.width.slice(0, computedStyle.width.length - 2)
      const height = computedStyle.height.slice(0, computedStyle.height.length - 2)

      const top = (window.innerHeight / 2) - (height / 2)
      this.alert.style.top = `${top}px`
    }

    open() {
      this.alert.style.visibility = 'visible'
      this.alert.style.display = 'block'

      if (!this.alert.classList.contains('active')) {
        this.alert.classList.add('active')
        this.center()

        // var preloader = this.alert.querySelector('.circle-progress')
        // if (preloader) {
        //  phonon.preloader(preloader).show()
        // }

        document.body.appendChild(this.createBackdrop())
      }
    }

    onHide() {
      const backdrop = document.querySelector(`.${BACKDROP_SELECTOR}[data-id="${this.alert.id}"]`)
      document.body.removeChild(backdrop)

      this.alert.style.visibility = 'hidden'
      this.alert.style.display = 'none'

      this.alert.classList.remove('close')

      // remove autogenerated dialogs, see: #199
      if (this.alert.getAttribute('data-auto')) {
        document.body.removeChild(this.alert)
      }

      backdrop.removeEventListener('transitionend', event => this.onHide(event), false)
    }

    close() {
      // off(dialog)

      if (this.alert.classList.contains('active')) {
        this.alert.classList.remove('active')
        this.alert.classList.add('close')

        // var preloader = dialog.querySelector('.circle-progress')
        // if (preloader) phonon.preloader(preloader).hide()

        const backdrop = document.querySelector(`.${BACKDROP_SELECTOR}[data-id="${this.alert.id}"]`)
        backdrop.addEventListener('transitionend', event => this.onHide(event), false)

        // fix issue #62
        window.setTimeout(() => {
          backdrop.classList.add('fadeout')
        }, 1)
      }
    }
  }

  return Alert
})()

export default Alert
